Here is the algorithm for the Circular Queue program, including the operations enqueue, dequeue, and display:

---

### Circular Queue Operations Algorithm

#### 1. Enqueue Operation Algorithm

Step 1: Start.

Step 2: Check if the queue is full using the condition:  
   - if ((rear + 1) % MAX == front).  
   - If the queue is full, print "Queue is full! Cannot insert [value]." and exit the function.

Step 3: If the queue is not full:
   - If front == -1 (queue is empty), set front = 0.
   - Update rear = (rear + 1) % MAX (this ensures circular behavior of the queue).
   - Insert the value at queue[rear].
   - Print "[value] inserted into queue."

Step 4: End.

---

#### 2. Dequeue Operation Algorithm

Step 1: Start.

Step 2: Check if the queue is empty using the condition:  
   - if (front == -1).  
   - If the queue is empty, print "Queue is empty! Cannot perform dequeue." and exit the function.

Step 3: If the queue is not empty:
   - Get the value to be dequeued: value = queue[front].
   - If front == rear (queue has only one element), set both front and rear to -1.
   - Otherwise, update front = (front + 1) % MAX to maintain the circular behavior of the queue.
   - Print "[value] deleted from queue."

Step 4: End.

---

#### 3. Display Operation Algorithm

Step 1: Start.

Step 2: Check if the queue is empty using the condition:  
   - if (front == -1).  
   - If the queue is empty, print "Queue is empty! Nothing to display." and exit the function.

Step 3: If the queue is not empty:
   - Initialize i = front.
   - While i != rear, print queue[i] and update i = (i + 1) % MAX to display elements in a circular manner.
   - Finally, print queue[rear].

Step 4: End.

---

#### Main Program Flow

Step 1: Display the menu options:  
   - 1. Enqueue  
   - 2. Dequeue  
   - 3. Display  
   - 4. Exit  

Step 2: Read the user input for the chosen operation.

Step 3: Execute the corresponding operation based on the user input:
   - If the user chooses Enqueue, ask for the value and perform the enqueue operation.
   - If the user chooses Dequeue, perform the dequeue operation.
   - If the user chooses Display, show the current elements in the queue.
   - If the user chooses Exit, terminate the program.

Step 4: If an invalid choice is made, display "Invalid choice! Please try again."

Step 5: Repeat the above steps until the user selects Exit.

---

Step 6: Stop. 

---

This algorithm effectively manages a Circular Queue with the operations enqueue, dequeue, and display as outlined in the provided C program.