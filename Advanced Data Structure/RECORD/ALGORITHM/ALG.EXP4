createNode

Step 1: Start.

Step 2: Allocate memory for a new node using malloc.

Step 3: Set the data of the node to the provided value, and both prev and next to NULL.

Step 4: Return the newly created node.

Step 5: Stop.


---

insertAtBeginning

Step 1: Start.

Step 2: Create a new node by calling createNode(data).

Step 3: Set the new node's next to the current head of the list.

Step 4: If the list is not empty, set the prev pointer of the current head to the new node.

Step 5: Return the new node as the new head of the list.

Step 6: Stop.


---

insertAtEnd

Step 1: Start.

Step 2: Create a new node by calling createNode(data).

Step 3: If the list is empty (head is NULL), return the new node as the head.

Step 4: Otherwise, traverse to the last node by checking next != NULL.

Step 5: Set the next pointer of the last node to the new node and set the prev pointer of the new node to the last node.

Step 6: Return the head of the list.

Step 7: Stop.


---

insertAfterPosition

Step 1: Start.

Step 2: If the head is NULL or the position is less than 1, print "Position out of range" and return the list unchanged.

Step 3: Traverse the list to the specified position by checking temp != NULL and incrementing i until reaching the desired position.

Step 4: If the position is out of range, print "Position out of range" and return the list unchanged.

Step 5: Create a new node by calling createNode(data).

Step 6: Set the new nodeâ€™s next to the next of the current node, and update the prev of the next node (if it exists) to the new node.

Step 7: Set the next of the current node to the new node and the prev of the new node to the current node.

Step 8: Return the head of the list.

Step 9: Stop.


---

deleteAtBeginning

Step 1: Start.

Step 2: If the list is empty (head is NULL), print "List is empty" and return the list unchanged.

Step 3: Set the head to the next node of the current head.

Step 4: If the new head is not NULL, set its prev to NULL.

Step 5: Free the old head node.

Step 6: Return the updated head of the list.

Step 7: Stop.


---

deleteAtEnd

Step 1: Start.

Step 2: If the list is empty (head is NULL), print "List is empty" and return the list unchanged.

Step 3: Traverse to the last node by checking next != NULL.

Step 4: Set the next pointer of the previous node to NULL (if the last node is not the head).

Step 5: If the last node is the head (only one node), set the head to NULL.

Step 6: Free the last node.

Step 7: Return the updated head of the list.

Step 8: Stop.


---

deleteAtPosition

Step 1: Start.

Step 2: If the head is NULL or the position is less than 1, print "Position out of range" and return the list unchanged.

Step 3: Traverse the list to the specified position by checking temp != NULL and incrementing i until reaching the desired position.

Step 4: If the position is out of range, print "Position out of range" and return the list unchanged.

Step 5: If the node to be deleted is not the first node, update the next pointer of the previous node to skip the node to be deleted.

Step 6: If the node to be deleted is not the last node, update the prev pointer of the next node to skip the node to be deleted.

Step 7: Free the node to be deleted.

Step 8: Return the updated head of the list.

Step 9: Stop.


---

displayList

Step 1: Start.

Step 2: If the list is empty (head is NULL), print nothing.

Step 3: Traverse the list starting from head, printing the data of each node.

Step 4: Print a newline after displaying all elements.

Step 5: Stop.


---

main

Step 1: Start.

Step 2: Display the menu with the following options:

1. Insert at beginning



2. Insert at end



3. Insert after position



4. Delete at beginning



5. Delete at end



6. Delete at position



7. Display list



8. Exit




Step 3: Read the user's choice.

Step 4: If the choice is:

1 (Insert at beginning): Read data and call insertAtBeginning(head, data).

2 (Insert at end): Read data and call insertAtEnd(head, data).

3 (Insert after position): Read data and position, then call insertAfterPosition(head, data, position).

4 (Delete at beginning): Call deleteAtBeginning(head).

5 (Delete at end): Call deleteAtEnd(head).

6 (Delete at position): Read position, then call deleteAtPosition(head, position).

7 (Display list): Call displayList(head).

8 (Exit): Exit the program.

Default: Print "Invalid choice! Please try again".


Step 5: Repeat the menu until the user chooses option 8 (Exit).

Step 6: Stop.

